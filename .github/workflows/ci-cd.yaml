name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  lint-test-build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      # Step 4: Run linting
      - name: Run flake8
        run: |
          echo "Running Linting..."
          flake8 src tests --max-line-length=120

      # Step 5: Run tests
      - name: Run tests with pytest
        run: |
          if [ -d "tests" ]; then
            pytest --maxfail=3 --disable-warnings -q
          else
            echo "No tests directory found. Skipping tests."
            exit 0
          fi
          

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/housing-app:latest

  deploy:
  needs: lint-test-build
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main'

  steps:
    - name: Validate required secrets
      run: |
        if [ -z "${{ secrets.EC2_HOST }}" ] || [ -z "${{ secrets.EC2_KEY }}" ]; then
          echo "ERROR: EC2_HOST or EC2_KEY secret is missing!"
          exit 1
        fi

    - name: Deploy to EC2
      run: |
        echo "Deploying..."

        # Save PEM key
        echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
        chmod 400 ec2_key.pem
        ls -l ec2_key.pem

        # SSH into EC2 and run commands
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << 'EOF'
          echo "Connected to EC2"

          # Your deployment commands below
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing..."
            # Detect OS and install Docker accordingly (example for Amazon Linux)
            if [ -f /etc/amzn-release ]; then
              sudo yum update -y
              sudo amazon-linux-extras enable docker
              sudo yum install -y docker
            elif [ -f /etc/debian_version ]; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io
            fi
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            exit  # Exit to reload groups, second SSH session needed
          fi
        EOF

        # Second SSH session after Docker install/group changes
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} << 'EOF'
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/housing-app:latest
          docker stop housing-app || true
          docker rm housing-app || true
          docker run -d --name housing-app -p 8000:8000 ${{ secrets.DOCKERHUB_USERNAME }}/housing-app:latest
        EOF